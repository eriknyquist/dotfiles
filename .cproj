cproj_generate_makefile=true
cproj_generate_main=true

cproj_define_c_filename() {
    # cproj_define_h_filename: if defined, will be called to generate filename
    # for a new .h template file
    #
    # $1 : project name. The project name given to cproj as a command line
    #      argument
    #
    # return : this function should return the name of the template .h file
    #          by writing it to stdout (e.g. "echo")

    echo "$1".c
}

cproj_define_h_filename() {
    # cproj_define_h_filename: if defined, will be called to generate filename
    # for a new .h template file
    #
    # $1 : project name. The project name given to cproj as a command line
    #      argument
    #
    # return : this function should return the name of the template .h file
    #          by writing it to stdout (e.g. "echo")
    # unset cproj_define_h_filename

    echo "$1"_api.h
}

cproj_write_c_file() {
    # cproj_write_c_file: if defined, will be called to write the C file
    # template, providing an opportunity to modify the contents
    #
    # $1 : name of .c file to be written. Whatever is returned by
    #      cproj_write_c_file will be written to a file of this name. If
    #      cproj_define_c_filename is defined, the value it returns will be
    #      provided by $1
    #
    # $2 : .c file contents. This will be the default contents for a template
    #      .c file with an empty 'main()' defined.
    #
    # return : this function should return the contents of the .c file by
    #          writing it to stdout (e.g. "echo")

    cat << EOF
/*
 * $1
 */
$2
EOF
}

cproj_write_h_file() {
    # cproj_write_h_file: if defined, will be called to write the .h file
    # template, providing an opportunity to modify the contents
    #
    # $1 : name of .h file to be written. Whatever is returned by
    #      cproj_write_h_file will be written to a file of this name. If
    #      cproj_define_h_filename is defined, the value it returns will be
    #      provided by $1
    #
    # $2 : .h file contents. This will be the default contents for a template
    #      .h file with include guards added
    #
    # return : this function should return the contents of the .h file by
    #          writing it to stdout (e.g. "echo")

    cat << EOF
/*
 * $1
 */
$2
EOF
}
