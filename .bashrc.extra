export VIM_CTAGS_FTYPES=*.c,*.h,*.py,*.sh,*.mk,*Makefile,*.tex,*.vim
export VIM_CTAGS_FILE=.tags

cproj_generate_makefile=true
cproj_generate_main=true

update_ctags () {
    VIM_CTAGS_FILE=".tags"

    TOPDIR=$(git rev-parse --show-toplevel)
    # Bail if not in a git repository
    [ $? -eq 0 ] || return

    # Bail if no tags file already exists
    [ -f $TOPDIR/$VIM_CTAGS_FILE ] || return

    # Get filename relative to repo root, then add backslashes
    # before '.' and '/' to make it suitable for a sed pattern
    RELFNAME=$(realpath --relative-to=$TOPDIR $1)
    [ $? -eq 0 ] || return

    # Need the absolute path to check if file is in git repo
    ABSFNAME=$(realpath $1)
    [ $? -eq 0 ] || return

    if [ "${ABSFNAME##$TOPDIR}" == "${ABSFNAME}" ]
    then
        # Target file is not in the current git repository
        exit
    fi

    # Add backslashes before '.' and '/' to make filename
    # suitable for a sed pattern
    ESCFNAME=$(echo $RELFNAME | sed 's/\//\\\//g; s/\./\\\./g')
    [ $? -eq 0 ] || return

    cd $TOPDIR

    # Remove all tags for this file from tags file
    sed -i "/$ESCFNAME/d" $VIM_CTAGS_FILE
    [ $? -eq 0 ] || return

    # Re-generate tags for this file and append to tags file
    ctags -a -f $VIM_CTAGS_FILE $RELFNAME
    cd -
}

cproj() {
    if [ $# -lt 1 ] || [ $# -gt 2 ]
    then
        echo "Usage: $0 <project_name> [<directory>]"
        return
    fi

    mainfname=main.c
    cfgfile="$HOME"/.cproj
    projname=$1

    if [ $# -eq 2 ]
    then
        directory=$2/
    else
        directory=$projname/
    fi

    [ -d $directory ] || mkdir -p $directory

    # Source config file if it exists
    [ -f $cfgfile ] && source $cfgfile

    # Generate .h file name
    type cproj_define_h_filename > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
        hfname=`cproj_define_h_filename $projname`
    else
        hfname=$projname.h
    fi

    # Generate .c file name
    type cproj_define_c_filename > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
        cfname=`cproj_define_c_filename $projname`
    else
        cfname=$projname.c
    fi

    # Generate include guards
    guard=$(echo ${hfname%.*} | awk '{print toupper($0)}')_H

    # Generate .h file contents
    read -d '' default_hfcontents << EOF
#ifndef $guard
#define $guard



#endif
EOF

    # Generate main.c file contents
    read -d '' default_maincontents << EOF
#include "$hfname"

int main(int argc, char *argv[])
{

}
EOF

    # Generate .c file contents
    default_cfcontents="#include \"$hfname\""

    # Generate Makefile contents
    read -d '' default_makefile_contents << EOF
OBJ= \$(patsubst %.c,%.o,\$(wildcard *.c))
PROGNAME=$projname

.PHONY: clean

%: %.c

all: \$(PROGNAME)

\$(PROGNAME): \$(OBJ)
	\$(CC) $^ -o \$@ \$(CFLAGS) \$(LDFLAGS)

clean:
	rm -f *.o
	rm -f \$(PROGNAME)
EOF

    # Run .h file contents through function defined in config file
    type cproj_write_h_file > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
        hfcontents=`cproj_write_h_file $hfname "$default_hfcontents"`
    else
        hfcontents="$default_hfcontents"
    fi

    # Write .h file
    echo "$hfcontents" > $directory$hfname

    # Run .c file contents through function defined in config file
    type cproj_write_c_file > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
        maincontents=`cproj_write_c_file "$mainfname" "$default_maincontents"`
        cfcontents=`cproj_write_c_file $cfname "$default_cfcontents"`
    else
        maincontents="$default_maincontents"
        cfcontents="$default_cfcontents"
    fi

    # Write .c file
    echo "$cfcontents" > $directory$cfname

    # Write main.c file
    generate_main=$(echo $cproj_generate_main | awk '{print toupper($0)}')
    if [ "$generate_main" = "TRUE" ]
    then
        echo "$maincontents" > "$directory$mainfname"
    fi

    # Write Makefile
    generate_makefile=$(echo $cproj_generate_makefile | awk '{print toupper($0)}')
    if [ "$generate_makefile" = "TRUE" ]
    then
        echo "$default_makefile_contents" > $directory'Makefile'
    fi
}

parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/'
}

export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
